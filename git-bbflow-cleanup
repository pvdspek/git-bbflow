#
# git-bbflow -- A collection of Git extensions to provide high-level
# repository operations for Blue Billywig's branching model.
#
#
# Copyright (c) 2012 Blue Billywig B.V. All rights reserved.
#
# Based on the work of Vincent Driessen, for which the copyright notice follows.
#
#
# Copyright 2010 Vincent Driessen. All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 
#    1. Redistributions of source code must retain the above copyright notice,
#       this list of conditions and the following disclaimer.
# 
#    2. Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY VINCENT DRIESSEN ``AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
# EVENT SHALL VINCENT DRIESSEN OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
# OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
# EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# 
# The views and conclusions contained in the software and documentation are
# those of the authors and should not be interpreted as representing official
# policies, either expressed or implied, of Vincent Driessen.
#

require_git_repo
require_gitbbflow_initialized
gitbbflow_load_settings

usage() {
	echo "usage: git bbflow update"
}

cmd_default() {
    git_fetch_origin
    require_clean_working_tree

    BRANCH=$(git_current_branch)

    local orphaned_branches=0

    local feature_branches=$(echo "$(git_local_branches)" | grep "^$FEATURE_PREFIX")
    for feature_branch in $feature_branches; do
        if ! has "$ORIGIN/$feature_branch" $(git_remote_branches); then
            if [ "$feature_branch" = "$BRANCH" ]; then
                git checkout "$DEVELOP_BRANCH"
            fi

            git branch -D "$feature_branch"
            orphaned_branches=$[ $orphaned_branches + 1 ]
        fi
    done

    local release_branches=$(echo "$(git_local_branches)" | grep "^$RELEASE_PREFIX")
    for release_branch in $release_branches; do
        if ! has "$ORIGIN/$release_branch" $(git_remote_branches); then
            if [ "$release_branch" = "$BRANCH" ]; then
                git checkout "$MASTER_BRANCH"
            fi

            git branch -D "$release_branch"
            orphaned_branches=$[ $orphaned_branches + 1 ]
        fi
    done

    local hotfix_branches=$(echo "$(git_local_branches)" | grep "^$HOTFIX_PREFIX")
    for hotfix_branch in $hotfix_branches; do
        if ! has "$ORIGIN/$hotfix_branch" $(git_remote_branches); then
            if [ "$hotfix_branch" = "$BRANCH" ]; then
                git checkout "$MASTER_BRANCH"
            fi

            git branch -D "$hotfix_branch"
            orphaned_branches=$[ $orphaned_branches + 1 ]
        fi
    done

    echo

    if [ $orphaned_branches -eq 0 ]; then
        echo "No cleanup needed."
    else
        echo "Cleaned up $orphaned_branches orphaned branches."
    fi

    if [ "$BRANCH" != "$(git_current_branch)" ]; then
        echo "You are now on branch '$(git_current_branch)'."
    fi
}

cmd_help() {
	usage
	exit 0
}
