#
# git-bbflow -- A collection of Git extensions to provide high-level
# repository operations for Blue Billywig's branching model.
#
#
# Copyright (c) 2012 Blue Billywig B.V. All rights reserved.
#
# Based on the work of Vincent Driessen, for which the copyright notice follows.
#
#
# Copyright 2010 Vincent Driessen. All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 
#    1. Redistributions of source code must retain the above copyright notice,
#       this list of conditions and the following disclaimer.
# 
#    2. Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY VINCENT DRIESSEN ``AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
# EVENT SHALL VINCENT DRIESSEN OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
# OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
# EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# 
# The views and conclusions contained in the software and documentation are
# those of the authors and should not be interpreted as representing official
# policies, either expressed or implied, of Vincent Driessen.
#

require_git_repo
require_gitbbflow_initialized
gitbbflow_load_settings

usage() {
	echo "usage: git bbflow feature [list] [-v]"
	echo "       git bbflow feature create <feature-number>"
	echo "       git bbflow feature switch <feature-number>"
	echo "       git bbflow feature abort [-f]"
	echo "       git bbflow feature complete"
	echo "       git bbflow feature rollback"
}

cmd_default() {
	cmd_list "$@"
}

cmd_help() {
	usage
	exit 0
}

cmd_list() {
	DEFINE_boolean verbose false 'verbose (more) output' v
	parse_args "$@"

	git_fetch_origin

	local local_feature_branches
	local remote_feature_branches
	local short_names
	local current_branch=$(git_current_branch)

    local_feature_branches=$(echo "$(git_local_branches)" | grep "^$FEATURE_PREFIX")
	remote_feature_branches=$(echo "$(git_remote_branches)" | grep "^$ORIGIN/$FEATURE_PREFIX")

	if [ -z "$local_feature_branches" -a -z "$remote_feature_branches" ]; then
	    echo
		echo "No feature branches exist."
		exit 0
	fi

    short_names=$(git_feature_branch_shortnames)

	# determine column width first
	local width=0
	local branch
	for branch in $short_names; do
		local len=${#branch}
		width=$(max $width $len)
	done
	width=$(($width+3))

	local branch
	for branch in $short_names; do
		local fullname=$FEATURE_PREFIX$branch

        if has "$fullname" $(git_local_branches) && ! has "$ORIGIN/$fullname" $(git_remote_branches); then
            if [ "$fullname" = "$current_branch" ]; then
                echo -n "! "
            else
                echo -n "- "
            fi
        else
            if [ "$fullname" = "$current_branch" ]; then
                echo -n "* "
            else
                echo -n "  "
            fi
        fi

        if flag verbose; then
            printf "%-${width}s" "$branch"

            if ! has "$fullname" $(git_local_branches); then
                echo -n "(remote)"
            else
                local base=$(git merge-base "$fullname" "$DEVELOP_BRANCH")
                local develop_sha=$(git rev-parse "$DEVELOP_BRANCH")
                local branch_sha=$(git rev-parse "$fullname")

                if [ "$branch_sha" = "$develop_sha" ]; then
                    echo -n "(no commits yet) "
                else
                    local nicename=$(git rev-parse --short "$base")
                    echo -n "(based on $nicename) "
                fi

                if has "$fullname" $(git_local_branches) && ! has "$ORIGIN/$fullname" $(git_remote_branches); then
                    echo -n "(remote deleted, use 'git bbflow cleanup')"
                else
                    git_compare_branches $fullname "$ORIGIN/$fullname"
                    local status=$?
                    if [ $status -gt 0 ]; then
                        if [ $status -eq 1 ]; then
                            echo -n "(remote contains updates, use 'git bbflow update' on branch)"
                        elif [ $status -eq 2 ]; then
                            echo -n "(changes not pushed to remote yet, use 'git bbflow push' on branch)"
                        elif [ $status -eq 3 ]; then
                            echo -n "(remote contains updates, use 'git bbflow update' on branch)"
                        else
                            echo -n "(error: remote does not match local branch)"
                        fi
                    fi
                fi
            fi
        else
            echo -n "$branch"
        fi

        echo
	done
}

cmd_create() {
	parse_args "$@"
	parse_feature "$@"
	require_feature_arg

	git_fetch_origin

	# sanity checks
	require_clean_working_tree

    local feature_branch=$(echo "$(git_local_branches)" | grep "^$FEATURE_PREFIX$FEATURE-")
    [ -z $feature_branch ] || die "Feature '$FEATURE' already exists. Use 'git bbflow feature switch $FEATURE' to switch to this feature."

    local remote_feature_branch=$(echo "$(git_remote_branches)" | grep "^$ORIGIN/$FEATURE_PREFIX$FEATURE-")
    [ -z $remote_feature_branch ] || die "Feature '$FEATURE' already exists remotely. Use 'git bbflow feature switch $FEATURE' to import and switch to this feature."

    local feature_tag=$(echo "$(git_all_tags)" | grep "^$FEATURETAG_PREFIX$FEATURE-")
    [ -z $feature_tag ] || die "Feature '$FEATURE' has already been closed. Use another feature number."

    # Check if develop branch is up-to-date. Update if necessary.
	git_compare_branches "$DEVELOP_BRANCH" "$ORIGIN/$DEVELOP_BRANCH"
	status=$?
	if [ $status -eq 1 -o $status -eq 3 ]; then
	    echo
	    echo "Updating '$DEVELOP_BRANCH' branch from remote '$ORIGIN'."

	    git checkout -q "$DEVELOP_BRANCH"
	    git merge "$ORIGIN/$DEVELOP_BRANCH"
	    status=$?

	    if [ $status -eq 1 ]; then
	        echo
	        echo "Merge conflict while updating branch '$DEVELOP_BRANCH' from remote '$ORIGIN'."
            echo "Fix conflicts using merge tools and commit using 'git commit',"
            echo "or abort the merge resolution by running 'git merge --abort'."
            echo
            echo "After committing the resolved merge, use:"
            echo "- 'git bbflow feature create $FEATURE' to complete the current feature."
            echo
            echo "You are now on branch '$DEVELOP_BRANCH'."
            exit 1
        fi
    fi

    # get feature description
    local answer
    echo -n "Feature description: "
    read answer
    answer=$(echo "$answer" |  iconv -s -t "US-ASCII//TRANSLIT" | sed "s/[^A-Za-z0-9 ]//g" | tr "[A-Z]" "[a-z]" | tr -s ' ' '-' | sed 's/^-//' | sed 's/-$//')
    [ ! -z $answer ] || die "Invalid description."

    BRANCH="$FEATURE_PREFIX$FEATURE-$answer"

    # create branch
    git checkout -q -b "$BRANCH" "$DEVELOP_BRANCH"

    # publish to origin and track
    git push "$ORIGIN" "$BRANCH:refs/heads/$BRANCH"
    git config "branch.$BRANCH.remote" "$ORIGIN"
    git config "branch.$BRANCH.merge" "refs/heads/$BRANCH"

    echo
    echo "Created new feature branch '$BRANCH', based on '$DEVELOP_BRANCH', and published to '$ORIGIN'."
    echo "You are now on branch '$BRANCH'."
}

cmd_switch() {
    DEFINE_boolean noupdate false "don't update from $ORIGIN" n
    parse_args "$@"

    if noflag noupdate; then
        git_fetch_origin
    fi

    parse_feature "$@"
    require_feature_arg
    require_feature_exists

    # sanity checks
    require_clean_working_tree
    require_branch "$ORIGIN/$BRANCH"

    if has "$BRANCH" $(git_local_branches); then
        # change to branch
        local current_branch=$(git_current_branch)

        if [ "$BRANCH" = "$current_branch" ]; then
            die "Already on branch '$BRANCH'."
        else
            git checkout -q "$BRANCH"

            if noflag noupdate; then
                git_update_from_origin
            fi
        fi
    else
        # create tracking branch
        git checkout -b "$BRANCH" "$ORIGIN/$BRANCH"
    fi

    echo
    echo "You are now on branch '$BRANCH'."
}

cmd_abort() {
    DEFINE_boolean force false "force feature abort" f
    parse_args "$@"

    require_clean_working_tree
    require_on_feature_branch

    # Require feature tag to be absent.
    $(git_feature_tag_exists "$FEATURE") || die "Feature $FEATURE already closed. Cannot abort this feature."

    # Check if develop branch is up-to-date. Update if necessary.
	git_compare_branches "$DEVELOP_BRANCH" "$ORIGIN/$DEVELOP_BRANCH"
	status=$?
	if [ $status -eq 1 -o $status -eq 3 ]; then
	    echo
	    echo "Updating '$DEVELOP_BRANCH' branch from remote '$ORIGIN'."

	    git checkout -q "$DEVELOP_BRANCH"
	    git merge "$ORIGIN/$DEVELOP_BRANCH"
	    status=$?

	    if [ $status -eq 1 ]; then
	        echo
	        echo "Merge conflict while updating branch '$DEVELOP_BRANCH' from remote '$ORIGIN'."
            echo "Fix conflicts using merge tools and commit using 'git commit',"
            echo "or abort the merge resolution by running 'git merge --abort'."
            echo
            echo "After committing the resolved merge, use:"
            echo "- 'git bbflow feature switch $FEATURE' to switch back to the current feature."
            echo "- 'git bbflow feature abort' to abort the current feature."
            echo
            echo "You are now on branch '$DEVELOP_BRANCH'."
            exit 1
        fi

        git checkout -q "$BRANCH"
    fi

    # Check if feature branch is already fully merged to develop.
    $( ! git_is_branch_merged_into "$BRANCH" "$DEVELOP_BRANCH" ) || die "Feature already completed. Cannot abort this feature now. Use 'git bbflow feature rollback $FEATURE' if you need to rollback this feature."

    # Check if feature branch merged to develop before.
    $( ! git_is_branch_partially_merged_into "$BRANCH" "$DEVELOP_BRANCH" ) || die "Feature was completed before. Cannot abort this feature now. Use 'git bbflow feature rollback $FEATURE' if you need to rollback this feature."

    if noflag force; then
        git_compare_branches "$BRANCH" "$ORIGIN/$BRANCH"
        local status=$?
        [ $status -ne 1 -a $status -ne 3 ] || die "Remote changes to feature $FEATURE. Are you sure to abort? Use 'git bbflow feature abort -f' to force abort."

        git checkout -q "$DEVELOP_BRANCH"
        git branch -d "$BRANCH"
        if [ $? -ne 0 ]; then
            git checkout -q "$BRANCH"
            die "Cannot delete release branch '$BRANCH'. Use 'git bbflow feature abort -f' to force abort."
        fi
    else
        git checkout -q "$DEVELOP_BRANCH"
        git branch -D "$BRANCH"
        if [ $? -ne 0 ]; then
            git checkout -q "$BRANCH"
            die "Cannot delete branch '$BRANCH'."
        fi
    fi

    git push "$ORIGIN" ":$BRANCH"
    if [ $? -eq 0 ]; then
        echo
        echo "Aborted feature $FEATURE."
    else
        echo
        echo "Aborted local feature $FEATURE, but could not delete the remote branch '$BRANCH' on '$ORIGIN'. Please fix manually."
    fi

    echo "You are now on branch '$DEVELOP_BRANCH'."
}

cmd_complete() {
	parse_args "$@"

	git_fetch_origin

	# sanity checks
	require_clean_working_tree
	require_on_feature_branch

    # Check if feature branch is up-to-date.
	git_compare_branches "$BRANCH" "$ORIGIN/$BRANCH"
	local status=$?
	[ $status -ne 1 -a $status -ne 3 ] || die "Remote changes to feature $FEATURE. Use 'git bbflow update' to update the feature."
	[ $status -ne 2 ] || die "Local changes to feature $FEATURE. Use 'git bbflow push' first to push changes to remote."
	[ $status -ne 4 ] || die "Remote and local branch '$BRANCH' unrelated. Unrecoverable error."

    # Check if develop branch is up-to-date. Update if necessary.
	git_compare_branches "$DEVELOP_BRANCH" "$ORIGIN/$DEVELOP_BRANCH"
	status=$?
	if [ $status -eq 1 -o $status -eq 3 ]; then
	    echo
	    echo "Updating '$DEVELOP_BRANCH' branch from remote '$ORIGIN'."

	    git checkout -q "$DEVELOP_BRANCH"
	    git merge "$ORIGIN/$DEVELOP_BRANCH"
	    status=$?

	    if [ $status -eq 1 ]; then
	        echo
	        echo "Merge conflict while updating branch '$DEVELOP_BRANCH' from remote '$ORIGIN'."
            echo "Fix conflicts using merge tools and commit using 'git commit',"
            echo "or abort the merge resolution by running 'git merge --abort'."
            echo
            echo "After committing the resolved merge, use:"
            echo "- 'git bbflow feature switch $FEATURE' to switch back to the current feature."
            echo "- 'git bbflow feature complete' to complete the current feature."
            echo
            echo "You are now on branch '$DEVELOP_BRANCH'."
            exit 1
        fi

        git checkout -q "$BRANCH"
    fi

    # Check if feature branch is already merged to develop.
    $( ! git_is_branch_merged_into "$BRANCH" "$DEVELOP_BRANCH" ) || die "Feature already completed."

    # Try to merge feature into develop branch
    git_compare_branches "$BRANCH" "$DEVELOP_BRANCH"
    status=$?
    [ $status -ne 0 -a $status -ne 1 ] || die "Feature contains no changes. Not completing."
    [ $status -ne 4 ] || die "Branch '$BRANCH' not related to branch '$DEVELOP_BRANCH'. Unrecoverable error."

    git checkout -q "$DEVELOP_BRANCH" || die "Could not switch to '$DEVELOP_BRANCH' branch."

    echo
    echo "Merging '$BRANCH' branch into '$DEVELOP_BRANCH' branch."

    git merge --no-ff "$BRANCH"
    status=$?

    if [ $status -eq 1 ]; then
        echo
        echo "Merge conflict while merging feature branch '$BRANCH' into branch '$DEVELOP_BRANCH'."
        echo "Fix conflicts using merge tools and commit using 'git commit',"
        echo "or abort the merge resolution by running 'git merge --abort'."
        echo
        echo "After committing the resolved merge, use:"
        echo "- 'git bbflow feature switch $FEATURE' to switch back to the current feature."
        echo "- 'git bbflow complete' to complete the current feature."
        echo
        echo "You are now on branch '$DEVELOP_BRANCH'."
        exit 1
    fi

    git checkout -q "$BRANCH" || die "Could not switch to '$BRANCH' branch."

    git push "$ORIGIN" "$DEVELOP_BRANCH" || die "Could not push '$DEVELOP_BRANCH' to '$ORIGIN'."

    echo
    echo "Completed feature $FEATURE."
}

cmd_rollback() {
    echo "Feature rollback is not implemented yet."
}

parse_args() {
	# parse options
	FLAGS "$@" || exit $?
	eval set -- "${FLAGS_ARGV}"

    local feature_branch=$(echo "$(git_current_branch)" | grep "^$FEATURE_PREFIX")
    if [ ! -z "$feature_branch" ]; then
        local feature_branch_short=${feature_branch#$FEATURE_PREFIX}
        FEATURE=${feature_branch_short%%-*}
        BRANCH=$feature_branch
    fi
}

parse_feature() {
    FLAGS "$@" || exit $?
    eval set -- "${FLAGS_ARGV}"

    if [ ! -z $1 ]; then
        FEATURE=$1
        FEATUREARG=$FEATURE

        local local_feature_branch=$(echo "$(git_local_branches)" | grep "^$FEATURE_PREFIX$FEATURE-")
        local remote_feature_branch=$(echo "$(git_remote_branches)" | grep "^$ORIGIN/$FEATURE_PREFIX$FEATURE-")

        if [ ! -z $local_feature_branch ]; then
            BRANCH="$local_feature_branch"
        elif [ ! -z $remote_feature_branch ]; then
            BRANCH="${remote_feature_branch#$ORIGIN/}"
        fi
    fi
}


git_feature_branch_shortnames() {
    {
        git_local_branches | grep "^$FEATURE_PREFIX" | sed "s ^$FEATURE_PREFIX  g"
        git_remote_branches | grep "^$ORIGIN/$FEATURE_PREFIX" | sed "s ^$ORIGIN/$FEATURE_PREFIX  g"
    } | sort -u
}

git_feature_tag_exists() {
    local feature=$1
    local feature_tag=$(echo $(git_all_tags) | grep "^$FEATURETAG_PREFIX$feature-")

    if [ ! -z "$feature_tag" ]; then
        return 1
    fi

    return 0
}

require_feature_arg() {
    if [ "$FEATUREARG" = "" ]; then
        warn "Missing argument <feature-number>"
        usage
        exit 1
    fi
}

require_feature_exists() {
    [ ! -z $BRANCH ] || die "Feature $FEATURE does not exist."
}

require_on_feature_branch() {
    [ ! -z $BRANCH ] || die "Not on a feature branch."
}
