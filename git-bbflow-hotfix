#
# git-bbflow -- A collection of Git extensions to provide high-level
# repository operations for Blue Billywig's branching model.
#
#
# Copyright (c) 2012 Blue Billywig B.V. All rights reserved.
#
# Based on the work of Vincent Driessen, for which the copyright notice follows.
#
#
# Copyright 2010 Vincent Driessen. All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 
#    1. Redistributions of source code must retain the above copyright notice,
#       this list of conditions and the following disclaimer.
# 
#    2. Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY VINCENT DRIESSEN ``AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
# EVENT SHALL VINCENT DRIESSEN OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
# OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
# EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# 
# The views and conclusions contained in the software and documentation are
# those of the authors and should not be interpreted as representing official
# policies, either expressed or implied, of Vincent Driessen.
#

require_git_repo
require_gitbbflow_initialized
gitbbflow_load_settings

usage() {
	echo "usage: git bbflow hotfix [list] [-v]"
	echo "       git bbflow hotfix create <version>"
	echo "       git bbflow hotfix switch [-n] <version>"
	echo "       git bbflow hotfix abort [-f]"
	echo "       git bbflow hotfix complete"
	echo "       git bbflow hotfix rollback"
	echo "       git bbflow hotfix close"
}

cmd_default() {
	cmd_list "$@"
}

cmd_help() {
	usage
	exit 0
}

cmd_list() {
	DEFINE_boolean verbose false 'verbose (more) output' v
	parse_args "$@"

    git_fetch_origin

	local local_hotfix_branches
	local remote_hotfix_branches
	local short_names

    local_release_branches=$(echo "$(git_local_branches)" | grep "^$HOTFIX_PREFIX")
    remote_release_branches=$(echo "$(git_remote_branches)" | grep "^$ORIGIN/$HOTFIX_PREFIX")

    if [ -z "$local_release_branches" -a -z "$remote_release_branches" ]; then
        echo
        echo "No hotfix branches exist."
        exit 0
    fi

    short_names=$(git_hotfix_branch_shortnames)

	# determine column width first
	local width=0
	local branch
	for branch in $short_names; do
		local len=${#branch}
		width=$(max $width $len)
	done
	width=$(($width+3))

	local branch
	for branch in $short_names; do
		local fullname=$HOTFIX_PREFIX$branch

        if has "$fullname" $(git_local_branches) && ! has "$ORIGIN/$fullname" $(git_remote_branches); then
            if [ "$fullname" = "$BRANCH" ]; then
                echo -n "! "
            else
                echo -n "- "
            fi
        else
            if [ "$fullname" = "$BRANCH" ]; then
                echo -n "* "
            else
                echo -n "  "
            fi
        fi

        if flag verbose; then
            printf "%-${width}s" "$branch"

            if ! has "$fullname" $(git_local_branches); then
                echo -n "(remote)"
            else
                local base=$(git merge-base "$fullname" "$MASTER_BRANCH")
                local master_sha=$(git rev-parse "$MASTER_BRANCH")
                local branch_sha=$(git rev-parse "$fullname")

                if [ "$branch_sha" = "$master_sha" ]; then
                    echo -n "(no commits yet) "
                else
                    local nicename=$(git rev-parse --short "$base")
                    echo -n "(based on $nicename) "
                fi

                if has "$fullname" $(git_local_branches) && ! has "$ORIGIN/$fullname" $(git_remote_branches); then
                    echo -n "(remote deleted, use 'git bbflow cleanup')"
                else
                    git_compare_branches $fullname "$ORIGIN/$fullname"
                    local status=$?
                    if [ $status -gt 0 ]; then
                        if [ $status -eq 1 ]; then
                            echo -n "(remote contains updates, use 'git bbflow update' on branch)"
                        elif [ $status -eq 2 ]; then
                            echo -n "(changes not pushed to remote yet, use 'git bbflow push' on branch)"
                        elif [ $status -eq 3 ]; then
                            echo -n "(remote contains updates, use 'git bbflow update' on branch)"
                        else
                            echo -n "(error: remote does not match local branch)"
                        fi
                    fi
                fi
            fi
        else
            printf "%s" "$branch"
        fi

        echo
	done
}

cmd_create() {
    parse_args "$@"
    parse_version "$@"
    require_version_arg

    git_fetch_origin

    # sanity checks
    require_clean_working_tree
    require_no_existing_local_hotfix_branches
    require_no_existing_remote_hotfix_branches

    # Require release tag to be absent.
    if git_tag_exists "$RELEASETAG_PREFIX$VERSION"; then
        die "Release $VERSION already exists. Choose another hotfix release version."
    fi

    require_branches_equal "$MASTER_BRANCH" "$ORIGIN/$MASTER_BRANCH"

    # create branch
    BRANCH="$HOTFIX_PREFIX$VERSION"
    git checkout -q -b "$BRANCH" "$MASTER_BRANCH" || die "Could not create and switch to branch '$BRANCH'."

    # publish to origin and track
    git push "$ORIGIN" "$BRANCH:refs/heads/$BRANCH"
    git config "branch.$BRANCH.remote" "$ORIGIN"
    git config "branch.$BRANCH.merge" "refs/heads/$BRANCH"

    echo
    echo "Created new hotfix branch '$BRANCH', based on '$MASTER_BRANCH', and published to '$ORIGIN'."
    echo "You are now on branch '$BRANCH'."
}

cmd_switch() {
    DEFINE_boolean noupdate false "don't update from $ORIGIN" n
    parse_args "$@"
    parse_version "$@"
    require_version_arg

    git_fetch_origin

    BRANCH="$HOTFIX_PREFIX$VERSION"

    # sanity checks
    require_clean_working_tree
    require_branch "$ORIGIN/$BRANCH"

    if has "$BRANCH" $(git_local_branches); then
        # change to branch
        local current_branch=$(git branch --no-color | grep '^\* ' | grep -v 'no branch' | sed 's/^* //g')

        if [ "$BRANCH" = "$current_branch" ]; then
            die "Already on branch '$BRANCH'."
        else
            git checkout -q "$BRANCH" || die "Could not switch to branch '$BRANCH'."

            if noflag noupdate; then
                git_update_from_origin
            fi
        fi
    else
        # create tracking branch
        git checkout -q -b "$BRANCH" "$ORIGIN/$BRANCH" || die "Could not create and switch to branch '$BRANCH'."
    fi

    echo
    echo "You are now on branch '$BRANCH'."
}

cmd_abort() {
    DEFINE_boolean force false "force release abort" f
    parse_args "$@"

    git_fetch_origin

    # sanity checks
    require_clean_working_tree
    require_current_hotfix_branch

    # Require release tag to be absent.
    if git_tag_exists "$RELEASETAG_PREFIX$VERSION"; then
        die "Hotfix release $VERSION already completed. Cannot abort this hotfix release. Use 'git bbflow hotfix rollback' if you need to rollback the hotfix release."
    fi

    if noflag force; then
        git_compare_branches "$BRANCH" "$ORIGIN/$BRANCH"
        local status=$?
        if [ $status -eq 1 -o $status -eq 3 ]; then
            die "Remote changes to hotfix release '$VERSION'. Are you sure to abort? Use 'git bbflow hotfix abort -f' to force abort."
        fi

        git checkout -q "$MASTER_BRANCH"
        git branch -d "$BRANCH"
        if [ $? -ne 0 ]; then
            git checkout -q "$BRANCH"
            die "Cannot delete release branch '$BRANCH'. Use 'git bbflow hotfix abort -f' to force abort."
        fi
    else
        git checkout -q "$MASTER_BRANCH"
        git branch -D "$BRANCH"
        if [ $? -ne 0 ]; then
            git checkout -q "$BRANCH"
            die "Cannot delete branch '$BRANCH'."
        fi
    fi

    git push "$ORIGIN" ":$BRANCH"

    echo
    echo "Aborted hotfix release $VERSION."
}

cmd_complete() {
    parse_args "$@"

    git_fetch_origin

    # sanity checks
    require_clean_working_tree
    require_current_hotfix_branch

    # Check if hotfix branch is up-to-date.
	git_compare_branches "$BRANCH" "$ORIGIN/$BRANCH"
	local status=$?
	[ $status -ne 1 -a $status -ne 3 ] || die "Remote changes to hotfix release $VERSION. Use 'git bbflow update' to update the hotfix."
	[ $status -ne 2 ] || die "Local changes to hotfix release $VERSION. Use 'git bbflow push' first to push changes to remote."
	[ $status -ne 4 ] || die "Remote and local branch '$BRANCH' unrelated. Unrecoverable error."

    # Check if master branch is up-to-date. Update if necessary.
	git_compare_branches "$MASTER_BRANCH" "$ORIGIN/$MASTER_BRANCH"
	status=$?
	if [ $status -eq 1 -o $status -eq 3 ]; then
	    echo
	    echo "Updating '$MASTER_BRANCH' branch from remote '$ORIGIN'."

	    git checkout -q "$MASTER_BRANCH" || die "Cannot switch to branch '$MASTER_BRANCH'."
	    git merge "$ORIGIN/$MASTER_BRANCH"
	    status=$?

	    if [ $status -eq 1 ]; then
	        echo
	        echo "Merge conflict while updating branch '$MASTER_BRANCH' from remote '$ORIGIN'. This should not happen."
            echo "Fix conflicts using merge tools and commit using 'git commit',"
            echo "or abort the merge resolution by running 'git merge --abort'."
            echo
            echo "After committing the resolved merge, use:"
            echo "- 'git bbflow hotfix switch $VERSION' to switch back to the current hotfix release."
            echo "- 'git bbflow hotfix complete' to complete the current hotfix release."
            echo
            echo "You are now on branch '$MASTER_BRANCH'."
            exit 1
        fi

        git checkout -q "$BRANCH"
    fi

    # Check if develop branch is up-to-date. Update if necessary.
	git_compare_branches "$DEVELOP_BRANCH" "$ORIGIN/$DEVELOP_BRANCH"
	status=$?
	if [ $status -eq 1 -o $status -eq 3 ]; then
	    echo
	    echo "Updating '$DEVELOP_BRANCH' branch from remote '$ORIGIN'."

	    git checkout -q "$DEVELOP_BRANCH" || die "Cannot switch to branch '$DEVELOP_BRANCH'."
	    git merge "$ORIGIN/$DEVELOP_BRANCH"
	    status=$?

	    if [ $status -eq 1 ]; then
	        echo
	        echo "Merge conflict while updating branch '$DEVELOP_BRANCH' from remote '$ORIGIN'. This should not happen."
            echo "Fix conflicts using merge tools and commit using 'git commit',"
            echo "or abort the merge resolution by running 'git merge --abort'."
            echo
            echo "After committing the resolved merge, use:"
            echo "- 'git bbflow hotfix switch $VERSION' to switch back to the current hotfix release."
            echo "- 'git bbflow hotfix complete' to complete the current hotfix release."
            echo
            echo "You are now on branch '$DEVELOP_BRANCH'."
            exit 1
        fi

        git checkout -q "$BRANCH"
    fi

    local status

    # try to merge into master
    # in case a previous attempt to finish this release branch has failed,
    # but the merge into master was successful, we skip it now
    if ! git_is_branch_merged_into "$BRANCH" "$MASTER_BRANCH"; then
        git checkout -q "$MASTER_BRANCH" || die "Could not switch to branch '$MASTER_BRANCH'."

        git merge --no-ff "$BRANCH"
        status=$?

        if [ $status -ne 0 ]; then
            echo
            echo "Merge conflict while merging hotfix release branch '$BRANCH' into master branch '$MASTER_BRANCH'."
            echo "This shouldn't happen while merging the hotfix release branch into the master branch."
            echo
            echo "You are now on branch '$MASTER_BRANCH'."
            exit 1
        fi
    fi

    # Cherry-pick hotfix to release
    set +o posix
    local hotfix_base_commit=$(diff -u <(git rev-list --first-parent "$MASTER_BRANCH") <(git rev-list --first-parent "$BRANCH") | sed -ne 's/^ //p' | head -1)
    # workaround for IntelliJ BashSupport plugin not recognizing process substitution: "
    if [ -z "$hotfix_base_commit" ]; then
        feature_base_commit="$(git rev-list -n 1 $BRANCH)"
    fi

    git checkout -q "$DEVELOP_BRANCH" || die "Could not switch to branch '$DEVELOP_BRANCH'."

    for commit in $(git cherry "$DEVELOP_BRANCH" "$BRANCH" "$hotfix_base_commit" | grep '^+' | sed -ne 's/^+ //p'); do
        git cherry-pick "$commit"
        status=$?

        if [ $status -ne 0 ]; then
            echo
            echo "Merge conflict while cherry-picking commit '$commit' of hotfix release $VERSION into branch '$DEVELOP_BRANCH'."
            echo "Fix conflicts using merge tools and commit using 'git commit'."
            echo
            echo "After completing the fix:"
            echo "- 'git commit' to commit the fixed cherry-pick."
            echo "- 'git bbflow hotfix switch $VERSION' to return to the hotfix."
            echo "- 'git bbflow hotfix complete' to continue merging the hotfix into the '$DEVELOP_BRANCH' branch."
            echo
            echo "You are now on branch '$DEVELOP_BRANCH'."
            exit 1
        fi
    done

    # try to tag the release
    # in case a previous attempt to finish this release branch has failed,
    # but the tag was set successful, we skip it now
    local tagname=$RELEASETAG_PREFIX$VERSION
    if ! git_tag_exists "$tagname"; then
        git checkout -q "$MASTER_BRANCH" || die "Could not switch to branch '$MASTER_BRANCH'."

        git tag -a "$tagname" -m "Hotfix release $VERSION"
        status=$?

        if [ $status -ne 0 ]; then
            git checkout -q "$BRANCH" || warn "Could not switch to branch '$BRANCH'."

            echo
            echo "Could not tag hotfix release. Run 'git bbflow hotfix complete' again to retry."
            exit 1
        fi
    fi

    git push "$ORIGIN" "$MASTER_BRANCH" || warn "Could not push '$MASTER_BRANCH' to '$ORIGIN'."
    git push "$ORIGIN" "$DEVELOP_BRANCH" || warn "Could not push '$DEVELOP_BRANCH' to '$ORIGIN'."
    git push --tags "$ORIGIN" || warn "Could not push tags to '$ORIGIN'."

    git checkout -q "$BRANCH" || die "Could not switch to branch '$BRANCH'."

    echo
    echo "Merged hotfix release $VERSION into '$MASTER_BRANCH' and '$DEVELOP_BRANCH' branches and tagged it '$tagname'."
}

cmd_close() {
    parse_args "$@"

    git_fetch_origin

    # sanity checks
    require_clean_working_tree
    require_current_hotfix_branch

    require_branches_equal "$BRANCH" "$ORIGIN/$BRANCH"
    require_branches_equal "$MASTER_BRANCH" "$ORIGIN/$MASTER_BRANCH"

    # Require release tag to be present.
    $(git_tag_exists "$RELEASETAG_PREFIX$VERSION") || \
        die "Hotfix release $VERSION not yet completed. Cannot close."

    # close release branch
    git checkout -q "$MASTER_BRANCH" || "Could not switch to branch '$BRANCH'."
    git branch -d "$BRANCH" || die "Could not delete branch '$BRANCH'."

    # push to remote
    git push "$ORIGIN" ":$BRANCH" || warn "Could not push delete '$BRANCH' to '$ORIGIN'."

    echo
    echo "Closed hotfix release '$VERSION'."
    echo
    echo "You are now on branch '$MASTER_BRANCH'."
}

cmd_rollback() {
    echo "Hotfix release rollback is not implemented yet."
}

parse_args() {
	# parse options
	FLAGS "$@" || exit $?
	eval set -- "${FLAGS_ARGV}"

    local hotfix_branch=$(echo "$(git_current_branch)" | grep "^$HOTFIX_PREFIX")

    if [ ! -z "$hotfix_branch" ]; then
        BRANCH="$hotfix_branch"
        VERSION="${BRANCH#$HOTFIX_PREFIX}"
    fi
}

parse_version() {
    FLAGS "$@" || exit $?
    eval set -- "${FLAGS_ARGV}"

    if [ ! -z $1 ]; then
        VERSION=$1
        VERSIONARG=$VERSION

        local local_hotfix_branch=$(echo "$(git_local_branches)" | grep "^$HOTFIX_PREFIX$VERSION\$")
        local remote_hotfix_branch=$(echo "$(git_remote_branches)" | grep "^$ORIGIN/$HOTFIX_PREFIX$VERSION\$")

        if [ ! -z $local_hotix_branch ]; then
            BRANCH="$local_hotfix_branch"
        elif [ ! -z $remote_hotfix_branch ]; then
            BRANCH="${remote_hotfix_branch#$ORIGIN/}"
        fi
    fi
}

require_version_arg() {
    if [ "$VERSIONARG" = "" ]; then
        warn "Missing argument <version>"
        usage
        exit 1
    fi
}

require_no_existing_local_hotfix_branches() {
    local hotfix_branches=$(echo "$(git_local_branches)" | grep "^$HOTFIX_PREFIX")
    local first_branch=$(echo ${hotfix_branches} | head -n1)
    first_branch=${first_branch#$HOTFIX_PREFIX}
    [ -z "$hotfix_branches" ] || \
        die "There is an existing hotfix branch ($first_branch). Finish that one first."
}

require_no_existing_remote_hotfix_branches() {
    local hotfix_branches=$(echo "$(git_remote_branches)" | grep "^$ORIGIN/$HOTFIX_PREFIX")
    local first_branch=$(echo ${hotfix_branches} | head -n1)
    first_branch=${first_branch#$HOTFIX_PREFIX}
    [ -z "$hotfix_branches" ] || \
        die "There is an existing hotfix release branch ($first_branch). Finish that one first."
}

require_current_hotfix_branch() {
    local hotfix_branches=$(echo "$(git_local_branches)" | grep "^$HOTFIX_PREFIX")
    local current_branch=$(git_current_branch)

    if ! has "$current_branch" "$hotfix_branches"; then
        die "Not on a hotfix branch."
    fi
}


git_hotfix_branch_shortnames() {
    {
        git_local_branches | grep "^$HOTFIX_PREFIX" | sed "s ^$HOTFIX_PREFIX  g"
        git_remote_branches | grep "^$ORIGIN/$HOTFIX_PREFIX" | sed "s ^$ORIGIN/$HOTFIX_PREFIX  g"
    } | sort -u
}
